#include <ros/ros.h>
#include <image_transport/image_transport.h>
#include <opencv2/highgui/highgui.hpp>
#include <cv_bridge/cv_bridge.h>
#include <opencv2/opencv.hpp>
#include <OpenNI.h>
#include <opencv2/aruco.hpp>
#include <string>
#include <iostream>
#include <sstream>
#include <opencv2/core/core.hpp>
#include <pthread.h>

#include <depth_registration.h>
using namespace cv;
using namespace std;

cv::Mat distortion_color;
cv::Mat cameraMatrix_color_clipped;

void loadCalibrationFiles(cv::Mat& cameraMatrix_color_clipped, cv::Mat& distortion_color)
{

    cv::FileStorage fs;
    string calib_path = "/home/wjx/test/openni2_primesense_viewer/calibration_data/003415165047/";
    cv::Mat cameraMatrix_color;
    
    
  if(fs.open(calib_path + "calib_color.yaml", cv::FileStorage::READ))
  {
    fs["cameraMatrix"] >> cameraMatrix_color;
    cameraMatrix_color_clipped = cameraMatrix_color.clone();
    cameraMatrix_color_clipped.at<double>(0, 0) /= 1;
    cameraMatrix_color_clipped.at<double>(1, 1) /= 1;
    cameraMatrix_color_clipped.at<double>(0, 2) /= 1;
    cameraMatrix_color_clipped.at<double>(1, 2) /= 1;
    fs["distortionCoefficients"] >> distortion_color;
    cout << "color matrix load success"<< endl;
    fs.release();

  
  }
  else
  {
    cout << "No calibration file: calib_color.yalm, using default calibration setting" << endl;
    cameraMatrix_color_clipped = cv::Mat::eye(3, 3, CV_64F);
    distortion_color = cv::Mat::zeros(1, 5, CV_64F);

    
  }


}



void imageCallback(const sensor_msgs::ImageConstPtr& msg)
{
  try
  {
    cv::imshow("view", cv_bridge::toCvShare(msg, "bgr8")->image);
    cv::Ptr<cv::aruco::Dictionary> dictionary = cv::aruco::getPredefinedDictionary(cv::aruco::DICT_4X4_50);

    /*int markerId = 23;
    int markerSize = 200;
    int borderBits = 1;
    Mat markerImg;
    aruco::drawMarker(dictionary, markerId, markerSize, markerImg, borderBits);
    imshow("ma",markerImg);*/

    Ptr<cv::aruco::DetectorParameters> detectorParams = cv::aruco::DetectorParameters::create();
    detectorParams->cornerRefinementMethod = aruco::CORNER_REFINE_SUBPIX;
    cv::Mat displyImg=cv_bridge::toCvShare(msg, "bgr8")->image.clone();
    //flip(displyImg,displyImg,1);
    std::vector< int > ids;
    std::vector< std::vector< cv::Point2f > > corners, rejected;
  //  vector< Vec3d > rvecs, tvecs;
    // detect markers and estimate pose
    cv::aruco::detectMarkers(displyImg, dictionary, corners, ids);
    //printf("%d\n",ids.size());
    if (ids.size() > 0)
    {
      cv::aruco::drawDetectedMarkers(displyImg, corners, ids);
//aruco::drawDetectedMarkers(displyImg, rejected, noArray(), Scalar(100, 0, 255));
      std::vector<cv::Vec3d>rvecs,tvecs;
      cv::aruco::estimatePoseSingleMarkers(corners,0.133f,cameraMatrix_color_clipped,distortion_color,rvecs,tvecs);
      for(int i=0; i<ids.size(); i++)
        {cv::aruco::drawAxis(displyImg,cameraMatrix_color_clipped,distortion_color,rvecs[i],tvecs[i],0.1);}
      
    }
    cv::aruco::drawDetectedMarkers(displyImg, rejected, noArray(), Scalar(100, 0, 255));
    cv::imshow("Markers",displyImg);
    cv::waitKey(30);
  }
  catch (cv_bridge::Exception& e)
  {
    ROS_ERROR("Could not convert from '%s' to 'bgr8'.", msg->encoding.c_str());
  }
}

int main(int argc, char **argv)
{

  loadCalibrationFiles(cameraMatrix_color_clipped, distortion_color);


  ros::init(argc, argv, "image_listener");
  ros::NodeHandle nh;
  cv::namedWindow("view");
  cv::startWindowThread();
  image_transport::ImageTransport it(nh);
  image_transport::Subscriber sub = it.subscribe("camera/image", 1, imageCallback);
  ros::spin();
  cv::destroyWindow("view");
}